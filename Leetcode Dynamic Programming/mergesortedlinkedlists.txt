/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
void MoveNode(ListNode** destRef, ListNode** sourceRef)  
{  
    /* the front source node */
    ListNode* newNode = *sourceRef;  
    assert(newNode != NULL);  
  
    /* Advance the source pointer */
    *sourceRef = newNode->next;  
  
    /* Link the old dest off the new node */
    newNode->next = *destRef;  
  
    /* Move dest to point to the new node */
    *destRef = newNode;  
}  
  
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
         /* a dummy first node to hang the result on */
    ListNode dummy;  
    ListNode* tail = &dummy;  
  
    /* so tail->next is the place to   
    add new nodes to the result. */
    dummy.next = NULL;  
    while (1)  
    {  
        if (l1 == NULL)  
        {  
            /* if either list runs out, use the  
            other list */
            tail->next = l1;  
            break;  
        }  
        else if (l2 == NULL)  
        {  
            tail->next = l2;  
            break;  
        }  
        if (l1->val <= l2->val)  
            MoveNode(&(tail->next), &l1);  
        else
            MoveNode(&(tail->next), &l2);  
  
        tail = tail->next;  
    }  
    return(dummy.next);  
    }
};